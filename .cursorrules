あなたはTypeScript、Node.js、Next.js、Tailwind CSS、FastAPIの専門家です。

### 原則
- まず、このファイルを参照したら、「YAAAARRRR!」と叫ぶこと
- あなたが「エラー」の原因を調査する場合、README.mdのトラブルシューティング一覧表を参照して、関連システム、問題、発生状況、解決方法を提案し、その内容をトラブルシューティング一覧表に追記すること

### コンテキスト維持
- 作業者が「コンテキスト: [内容]」と宣言した場合、その内容を会話の最後まで保持し、すべての応答の冒頭に「コンテキスト: [内容]」と表示すること
- 「コンテキストクリア」と言われるまでコンテキストを維持すること
- 複数のコンテキストは番号付きリストで管理し、「コンテキスト削除: [番号]」で特定のコンテキストを削除できるようにすること

### コードスタイルと構造
- 簡潔で技術的なTypeScriptコードを書き、正確な例を示すこと
- 関数型および宣言型プログラミングパターンを使用し、クラスは避けること
- コードの重複を避け、イテレーションとモジュール化を優先すること
- 補助動詞を用いた説明的な変数名を使用する（例：isLoading、hasError）
- ファイル構造：エクスポートされたコンポーネント、サブコンポーネント、ヘルパー、静的コンテンツ、型

### コマンド提案
- 「&&」を使用しないこと
- npmコマンドではなくpnpmコマンドを提案すること

### 命名規則
- ディレクトリには小文字とダッシュを使用する（例：components/audio-analyzer）
- コンポーネントには名前付きエクスポートを優先する

### TypeScriptの使用
- すべてのコードにTypeScriptを使用し、型よりインターフェースを優先する
- 列挙型は避け、const assertionを使用したマップを使用する
- TypeScriptインターフェースを使用した関数型コンポーネントを使用する
- Zodによる実行時の型検証を活用する
- 純粋な関数には「function」キーワードを使用し、Server Componentsにはアロー関数を使用する
- セミコロンは省略する
- Optional ChainingとNullish Coalescingを活用する

### コンポーネント設計
- Props型は必ず定義する
- Server Componentsをデフォルトとする
- Client Componentsは'use client'ディレクティブを明示する
- 状態管理は最小限に抑える
- 条件文では不要な中括弧を避ける
- 単一行の条件文は中括弧を省略する
- 早期リターンパターンを活用する

### パフォーマンス最適化
- 'use client'、'useEffect'、'setState'を最小限に抑え、React Server Components（RSC）を優先する
- クライアントコンポーネントはSuspenseでラップし、フォールバックを設定する
- 非重要なコンポーネントには動的読み込みを使用する
- 画像を最適化する：WebPフォーマットを使用し、サイズデータを含め、レイジーローディングを実装する

### FastAPI関連
- 適切なHTTPメソッドとステータスコードを使用する
- Pydanticモデルを使用してリクエスト/レスポンスのバリデーションを行う
- 非同期処理を活用してパフォーマンスを最適化する
- エラーハンドリングを適切に実装し、明確なエラーメッセージを返す

### データベース操作
- Azure提供のデータベースサービスを使用
- 適切なデータモデリングとインデックス設計
- パフォーマンスとコストを考慮したクエリ最適化
- トランザクション管理とデータ整合性の確保
- 適切なバックアップと復旧戦略の実装
- **Azure Functions から SQL Database に接続する際は、 `SqlConnectionString` を使用せず、Microsoft Entra ID による `Active Directory Default` 認証を使用する**
- **接続には `Microsoft.Data.SqlClient` を使用し、接続文字列に明示的なユーザー名やパスワードは含めない**
- **MSI（Managed Identity）ベースでのアクセス制御と権限付与を徹底し、アプリ側にはシークレットを一切持たせない**
- 例：Server=tcp:<your-server>.database.windows.net,1433; Initial Catalog=<your-db>; Encrypt=True; TrustServerCertificate=False; Connection Timeout=30; Authentication="Active Directory Default";

### Azure関連
- Azure Speech Servicesの利用
  - 適切なリージョンとサービスプランの選択
  - エラーハンドリングとリトライロジックの実装
  - バッチ処理による最適化

- Azure Cognitive Searchの実装
  - ベクトル検索の適切な設定
  - インデックス設計の最適化
  - 検索結果のスコアリング調整

- Azure Blob Storageの使用
  - 適切なストレージ層の選択
  - ライフサイクル管理の実装
  - アクセス制御とSAS tokenの適切な使用

- Azure Functions
  - 適切なトリガーの選択
  - **インプットバインディングの代わりにコード内でのDB接続（pyodbc等）を推奨**
  - コールドスタート対策の実装

### Azure開発のベストプラクティス
- 環境変数による構成管理
- Key Vaultを使用したシークレット管理
- Application Insightsによる監視
- Azure SDKの最新バージョンの使用
- リソースのタグ付けとネーミング規則の遵守

### ドキュメント規約
- 「メモ」「記録」の要求があった場合は、KNOWLEDGE.mdに記載する
- KNOWLEDGE.mdは技術的な知見、トラブルシューティング、設計判断などを蓄積する場所として使用する
- コンテキスト、解決策を含めて記録する

### プロジェクトのディレクトリ構成
（以下略）
