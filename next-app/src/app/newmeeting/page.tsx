"use client"

import { useState, useEffect, useCallback } from "react"
import { Button } from "@/components/ui/button"
import { Card } from "@/components/ui/card"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { useRouter } from "next/navigation"
import { useRecording } from "@/hooks/useRecording"
import { Upload, Mic } from "lucide-react"
import { useDropzone } from "react-dropzone"
import { saveBasicInfo } from "@/lib/api-client"
import { useAuth } from "@/hooks/useAuth"
import ProtectedRoute from "@/components/auth/ProtectedRoute"
import { uploadToAzureStorage } from "@/lib/utils/azure-storage"
import { toast } from "react-hot-toast"

export default function NewMeetingPage() {
  const router = useRouter()
  const { startRecording } = useRecording()
  const { user } = useAuth()
  const [isMobile, setIsMobile] = useState(false)
  const [isSubmitting, setIsSubmitting] = useState(false)
  const [submitError, setSubmitError] = useState<string | null>(null)
  const [isUploading, setIsUploading] = useState(false)
  const [uploadStatus, setUploadStatus] = useState<{
    success?: boolean
    message?: string
    url?: string
  } | null>(null)
  const [createdMeetingId, setCreatedMeetingId] = useState<number | null>(null)

  useEffect(() => {
    setIsMobile(/iPhone|iPad|iPod|Android/i.test(navigator.userAgent))
  }, [])

  // ÁèæÂú®ÊôÇÂàª„Åã„Çâ1ÊôÇÈñìÂæåÔºà1ÊôÇÈñìÂàª„Åø„ÅßÂõõÊç®‰∫îÂÖ•Ôºâ„ÅÆÂàùÊúüÂÄ§„ÇíË®àÁÆó
  const getInitialDateTime = () => {
    const now = new Date()
    const roundedHour = Math.ceil(now.getHours() + 1)
    const initialDate = new Date(now.getFullYear(), now.getMonth(), now.getDate(), roundedHour, 0, 0)

    return {
      year: initialDate.getFullYear().toString(),
      month: (initialDate.getMonth() + 1).toString().padStart(2, "0"),
      day: initialDate.getDate().toString().padStart(2, "0"),
      hour: initialDate.getHours().toString().padStart(2, "0"),
    }
  }

  const [formData, setFormData] = useState({
    ...getInitialDateTime(),
    companyName: "",
    companyNameBiz: "",
    industry: "",
    scale: "",
    meetingGoal: "",
  })

  useEffect(() => {
    if (user?.user_name) {
      // contactPerson„ÅÆÊõ¥Êñ∞Âá¶ÁêÜ„ÇíÂâäÈô§
    }
  }, [user])

  // Âπ¥„ÅÆÈÅ∏ÊäûËÇ¢„ÇíÁîüÊàêÔºàÁèæÂú®Âπ¥„Åã„Çâ+1Âπ¥„Åæ„ÅßÔºâ
  const getYearOptions = () => {
    const currentYear = new Date().getFullYear()
    return [currentYear, currentYear + 1]
  }

  // Êúà„ÅÆÈÅ∏ÊäûËÇ¢„ÇíÁîüÊàêÔºà1-12ÊúàÔºâ
  const getMonthOptions = () => {
    return Array.from({ length: 12 }, (_, i) => i + 1)
  }

  // Êó•„ÅÆÈÅ∏ÊäûËÇ¢„ÇíÁîüÊàêÔºàÈÅ∏Êäû„Åï„Çå„ÅüÂπ¥Êúà„Å´Âøú„Åò„Å¶Ôºâ
  const getDayOptions = () => {
    const daysInMonth = new Date(Number.parseInt(formData.year), Number.parseInt(formData.month), 0).getDate()
    return Array.from({ length: daysInMonth }, (_, i) => i + 1)
  }

  // ÊôÇÈñì„ÅÆÈÅ∏ÊäûËÇ¢„ÇíÁîüÊàêÔºà9:00-18:00Ôºâ
  const getHourOptions = () => {
    return Array.from({ length: 10 }, (_, i) => i + 9)
  }

  // Âü∫Êú¨ÊÉÖÂ†±„Çí‰øùÂ≠ò„Åô„ÇãÈñ¢Êï∞
  const handleSubmit = async (type: "save" | "next"): Promise<number | null> => {
    if (!user) {
      toast.error("„É≠„Ç∞„Ç§„É≥„Åó„Å¶„Åè„Å†„Åï„ÅÑ")
      return null
    }

    if (!formData.companyName) {
      toast.error("È°ßÂÆ¢Âêç„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ")
      return null
    }

    if (!formData.companyNameBiz) {
      toast.error("‰ºÅÊ•≠Âêç„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ")
      return null
    }

    try {
      setIsSubmitting(true)
      setSubmitError(null)

      // ‰ºöË≠∞Êó•ÊôÇÊñáÂ≠óÂàó„Çí‰ΩúÊàê
      const meeting_datetime = `${formData.year}-${formData.month.padStart(2, "0")}-${formData.day.padStart(2, "0")} ${formData.hour.padStart(2, "0")}:00:00`;
      
      // Save basic info
      const basicInfoData = {
        userId: user.user_id,
        year: formData.year,
        month: formData.month,
        day: formData.day,
        hour: formData.hour,
        companyName: formData.companyName,
        client_company_name: formData.companyNameBiz,
        client_contact_name: formData.companyName,
        industry: formData.industry,
        scale: formData.scale,
        meeting_goal: formData.meetingGoal,
        meeting_datetime: meeting_datetime,
      }

      console.log("Submitting form data:", basicInfoData);
      
      // API „ÇíÂëº„Å≥Âá∫„Åó„Å¶ÂïÜË´áÊÉÖÂ†±„Çí‰øùÂ≠òÔºàBasicInfo„ÉÜ„Éº„Éñ„É´„Å´‰øùÂ≠òÔºâ
      const response = await saveBasicInfo(basicInfoData)
      
      console.log("BasicInfo saved successfully:", response)
      
      // ‰ºöË≠∞ID„ÅÆÂèñÂæó„ÇíÁ¢∫Ë™ç
      if (!response.search_info?.meeting_id) {
        throw new Error("‰ºöË≠∞ID„ÅÆÂèñÂæó„Å´Â§±Êïó„Åó„Åæ„Åó„Åü")
      }
      
      // ‚òÜ„ÅÆÊÉÖÂ†±„Çí„É≠„Éº„Ç´„É´„Çπ„Éà„É¨„Éº„Ç∏„Å´‰øùÂ≠òÔºàÈå≤Èü≥ÁîªÈù¢„Åß„ÅÆÊ§úÁ¥¢Áî®Ôºâ
      try {
        const basicMeetingInfo = {
          userId: user.user_id,
          client_company_name: formData.companyNameBiz,
          client_contact_name: formData.companyName,
          meeting_datetime: meeting_datetime
        };
        
        localStorage.setItem('basicMeetingInfo', JSON.stringify(basicMeetingInfo));
        
        // response„Åã„ÇâÊ§úÁ¥¢ÊÉÖÂ†±„ÇíÂèñÂæó
        if (response.search_info) {
          console.log("Ê§úÁ¥¢ÊÉÖÂ†±„Çí„É≠„Éº„Ç´„É´„Çπ„Éà„É¨„Éº„Ç∏„Å´‰øùÂ≠ò:", response.search_info);
        }
        
        console.log("Âü∫Êú¨ÊÉÖÂ†±„Çí„É≠„Éº„Ç´„É´„Çπ„Éà„É¨„Éº„Ç∏„Å´‰øùÂ≠ò:", basicMeetingInfo);
      } catch (storageError) {
        console.warn("„É≠„Éº„Ç´„É´„Çπ„Éà„É¨„Éº„Ç∏„Å∏„ÅÆ‰øùÂ≠ò„Å´Â§±Êïó:", storageError);
        // Âá¶ÁêÜ„ÅØÁ∂öË°å
      }
      
      // ÊàêÂäüÊôÇ„ÅÆÂá¶ÁêÜ
      if (type === "next") {
        // ‰ºöË≠∞ID„ÅÆÂèñÂæó - „Åì„Çå„ÅØÈå≤Èü≥ÁîªÈù¢„ÅßÊ§úÁ¥¢„Åï„Çå„Çã
        console.log("BasicInfo‰øùÂ≠òÂÆå‰∫Ü„ÄÅÊ§úÁ¥¢ÊÉÖÂ†±:", response.search_info);
        
        // ÂïÜË´áÊÉÖÂ†±„ÅÆ‰øùÂ≠òÂÆå‰∫Ü„Çí„Éà„Éº„Çπ„Éà„ÅßÈÄöÁü•
        toast.success("ÂïÜË´áÊÉÖÂ†±„Çí‰øùÂ≠ò„Åó„Åæ„Åó„Åü„ÄÇÈå≤Èü≥ÁîªÈù¢„Å´ÁßªÂãï„Åó„Åæ„Åô");
        
        // „Éá„Éº„Çø„Éô„Éº„Çπ„Å∏„ÅÆÂèçÊò†„ÇíÁ¢∫ÂÆü„Å´„Åô„Çã„Åü„ÇÅ„Å´Â∞ë„ÅóÂæÖÊ©ü
        setTimeout(() => {
          console.log("Èå≤Èü≥ÁîªÈù¢„Å∏ÁßªÂãï„Åó„Åæ„Åô");
          // Èå≤Èü≥„Éö„Éº„Ç∏„Å∏ÁßªÂãï
          router.push(`/recording`);
        }, 1000);
      } else {
        // ‰øùÂ≠òÊàêÂäü„É°„ÉÉ„Çª„Éº„Ç∏„ÇíË°®Á§∫
        toast.success(`ÂïÜË´áÊÉÖÂ†±„Çí‰øùÂ≠ò„Åó„Åæ„Åó„Åü: ${response.message}`);
        // ‰ºöË≠∞ID„ÇíËøî„Åô
        return response.search_info.meeting_id;
      }
    } catch (error) {
      console.error("Error saving basic info:", error)
      
      // „Ç®„É©„Éº„É°„ÉÉ„Çª„Éº„Ç∏„ÅÆË©≥Á¥∞„ÇíÂèñÂæó
      let errorMessage = "Âü∫Êú¨ÊÉÖÂ†±„ÅÆ‰øùÂ≠ò„Å´Â§±Êïó„Åó„Åæ„Åó„Åü";
      
      if (error instanceof Error) {
        errorMessage = error.message;
        
        // „Éá„Éº„Çø„Éô„Éº„ÇπÊé•Á∂ö„Ç®„É©„Éº„ÅÆÁâπÂà•„Å™Âá¶ÁêÜ
        if (errorMessage.includes('„Éá„Éº„Çø„Éô„Éº„ÇπÊé•Á∂ö') || 
            errorMessage.includes('SQLDriverConnect') ||
            errorMessage.includes('„Éâ„É©„Ç§„Éê„Éº') ||
            errorMessage.includes('connection') ||
            errorMessage.includes('Failed to retrieve')) {
          errorMessage = "„Éá„Éº„Çø„Éô„Éº„ÇπÊé•Á∂ö„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü„ÄÇ„Çµ„Éº„Éê„ÉºÁÆ°ÁêÜËÄÖ„Å´ÈÄ£Áµ°„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ";
          toast.error("„Éá„Éº„Çø„Éô„Éº„ÇπÊé•Á∂ö„Ç®„É©„Éº", {
            duration: 6000,
            icon: "üõë",
          });
          
          console.error("„Éá„Éº„Çø„Éô„Éº„ÇπÊé•Á∂ö„Ç®„É©„Éº„ÅÆË©≥Á¥∞:", error.message);
        }
      }
      
      // „Ç®„É©„Éº„É°„ÉÉ„Çª„Éº„Ç∏„ÇíË®≠ÂÆö
      setSubmitError(errorMessage);
      
      // „É¢„Éº„ÉÄ„É´„ÇÑ„Éà„Éº„Çπ„Éà„Åß„Ç®„É©„Éº„ÇíË°®Á§∫
      toast.error(`„Ç®„É©„Éº: ${errorMessage}`);
    } finally {
      setIsSubmitting(false)
    }
    
    return null // „Ç®„É©„ÉºÊôÇ„ÅØnull„ÇíËøî„Åô
  }

  const handleFileUpload = async (file: File) => {
    if (!user) {
      toast.error("„É≠„Ç∞„Ç§„É≥„Åó„Å¶„Åè„Å†„Åï„ÅÑ")
      return
    }
    
    try {
      setIsUploading(true)
      setUploadStatus({ message: "ÂïÜË´áÊÉÖÂ†±„Çí‰øùÂ≠ò„Åó„Å¶„ÅÑ„Åæ„Åô..." })
      
      // Âü∫Êú¨ÊÉÖÂ†±„Çí‰øùÂ≠ò„Åó„Å¶‰ºöË≠∞ID„ÇíÂèñÂæó
      const meetingId = await handleSubmit("save")
      
      if (!meetingId) {
        setUploadStatus({
          success: false,
          message: "ÂïÜË´áÊÉÖÂ†±„ÅÆ‰øùÂ≠ò„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„ÄÇ„ÇÇ„ÅÜ‰∏ÄÂ∫¶„ÅäË©¶„Åó„Åè„Å†„Åï„ÅÑ„ÄÇ"
        })
        return
      }
      
      console.log("ÂèñÂæó„Åó„Åü‰ºöË≠∞ID:", meetingId)
      
      // Èü≥Â£∞„Éï„Ç°„Ç§„É´„ÇíWebMÂΩ¢Âºè„Å´Â§âÊèõÔºàÂÜÖÈÉ®ÁöÑ„Å´Âá¶ÁêÜÔºâ
      const webmFile = await convertToWebM(file)
      
      setUploadStatus({ message: "Èü≥Â£∞„Çí„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ‰∏≠..." })
      
      console.log("Èü≥Â£∞„Ç¢„ÉÉ„Éó„É≠„Éº„ÉâÈñãÂßã:", webmFile.name, "‰ºöË≠∞ID:", meetingId)
      
      // meeting_id„Å®user_id„ÇíÂê´„ÇÄ„Éï„Ç°„Ç§„É´Âêç„ÇíÁîüÊàê
      const userId = user.user_id
      const now = new Date()
      const timestamp = now.toISOString().replace(/[:.]/g, '-').replace('Z', '')
      const fileName = `meeting_${meetingId}_user_${userId}_${timestamp}.webm`
      
      console.log("„Ç¢„ÉÉ„Éó„É≠„Éº„ÉâÁî®„Éï„Ç°„Ç§„É´Âêç:", fileName)
      
      // Azure Blob Storage„Å´„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ
      const blobUrl = await uploadToAzureStorage(webmFile, fileName)
      
      console.log("„Ç¢„ÉÉ„Éó„É≠„Éº„ÉâÊàêÂäü:", blobUrl)
      
      setUploadStatus({
        success: true,
        message: "Èü≥Â£∞„ÅÆ„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Å´ÊàêÂäü„Åó„Åæ„Åó„Åü„ÄÇ„ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„Éâ„Å´ÁßªÂãï„Åó„Åæ„Åô...",
        url: blobUrl
      })
      
      // ÊàêÂäü„É°„ÉÉ„Çª„Éº„Ç∏Ë°®Á§∫Âæå„ÄÅ„ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„Éâ„Å´ÈÅ∑Áßª
      setTimeout(() => {
        if (user?.account_status === 'ACTIVE' && user?.role === 'manager') {
          router.push('/manager-dashboard')
        } else {
          router.push('/dashboard')
        }
      }, 2000)
    } catch (error) {
      console.error("„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Ç®„É©„Éº:", error)
      let errorMessage = "„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Å´Â§±Êïó„Åó„Åæ„Åó„Åü"
      
      if (error instanceof Error) {
        if (error.message.includes("MediaRecorder")) {
          errorMessage = "Èü≥Â£∞„Éï„Ç°„Ç§„É´„ÅÆÂ§âÊèõ„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„ÄÇÂà•„ÅÆ„Éï„Ç°„Ç§„É´„ÇíË©¶„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ"
        } else if (error.message.includes("BlobStorage")) {
          errorMessage = "„Çπ„Éà„É¨„Éº„Ç∏„Å∏„ÅÆ„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„ÄÇ„Éç„ÉÉ„Éà„ÉØ„Éº„ÇØÊé•Á∂ö„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ"
        }
      }
      
      setUploadStatus({
        success: false,
        message: errorMessage
      })
    } finally {
      setIsUploading(false)
    }
  }

  const convertToWebM = async (file: File): Promise<File> => {
    return new Promise((resolve, reject) => {
      try {
        // Èü≥Â£∞„Éï„Ç°„Ç§„É´„ÇíË™≠„ÅøËæº„ÇÄ
        const reader = new FileReader()
        reader.onload = async (e) => {
          try {
            const arrayBuffer = e.target?.result as ArrayBuffer
            const audioContext = new (window.AudioContext || (window as any).webkitAudioContext)()
            
            // Èü≥Â£∞„Éá„Éº„Çø„Çí„Éá„Ç≥„Éº„Éâ
            const audioBuffer = await audioContext.decodeAudioData(arrayBuffer)
            
            // Èü≥Â£∞„Éá„Éº„Çø„ÇíMediaStream„Å´Â§âÊèõ
            const destination = audioContext.createMediaStreamDestination()
            const source = audioContext.createBufferSource()
            source.buffer = audioBuffer
            source.connect(destination)
            
            // WebMÂΩ¢Âºè„Åß„Ç®„É≥„Ç≥„Éº„Éâ
            const mediaRecorder = new MediaRecorder(destination.stream, {
              mimeType: 'audio/webm',
              audioBitsPerSecond: 128000
            })
            
            // Èü≥Â£∞„Éá„Éº„Çø„ÇíWebMÂΩ¢Âºè„Å´Â§âÊèõ
            const chunks: Blob[] = []
            mediaRecorder.ondataavailable = (e) => chunks.push(e.data)
            mediaRecorder.onstop = () => {
              const webmBlob = new Blob(chunks, { type: 'audio/webm' })
              const webmFile = new File([webmBlob], file.name.replace(/\.[^/.]+$/, '.webm'), {
                type: 'audio/webm'
              })
              resolve(webmFile)
            }
            
            // Â§âÊèõÈñãÂßã
            mediaRecorder.start()
            source.start()
            
            // Â§âÊèõÂÆå‰∫Ü
            setTimeout(() => {
              mediaRecorder.stop()
              source.stop()
              audioContext.close()
            }, audioBuffer.duration * 1000)
          } catch (error) {
            reject(error)
          }
        }
        reader.onerror = (error) => reject(error)
        reader.readAsArrayBuffer(file)
      } catch (error) {
        reject(error)
      }
    })
  }

  const handleVoiceMemoImport = async () => {
    console.log("Opening voice memo picker")
    // Implement voice memo import logic here
    // This might involve using a native API or a third-party library
  }

  const onDrop = useCallback(
    (acceptedFiles: File[]) => {
      if (acceptedFiles[0]) handleFileUpload(acceptedFiles[0])
    },
    [handleFileUpload, createdMeetingId, user],
  )

  const { getRootProps, getInputProps, isDragActive } = useDropzone({
    onDrop,
    accept: {
      "audio/*": [".mp3", ".m4a", ".wav"],
    },
    multiple: false,
  })

  return (
    <ProtectedRoute>
      <div className="min-h-screen bg-zinc-50 p-4">
        <div className="mx-auto max-w-[600px]">
          <div className="mb-8">
            <h1 className="text-xl font-medium">„Éö„Éº„Ç∏1: Âü∫Êú¨ÊÉÖÂ†±ÂÖ•Âäõ</h1>
          </div>

          <Card className="p-6">
            <div className="space-y-6">
              <div>
                <h2 className="text-lg font-medium">Êñ∞Ë¶èÂïÜË´áË®òÈå≤</h2>
                <p className="text-sm text-zinc-500">Âü∫Êú¨ÊÉÖÂ†±„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ</p>
              </div>

              <div className="space-y-4">
                {/* Meeting Date/Time */}
                <div className="space-y-1.5">
                  <Label className="flex items-center text-sm">ÂÆüÊñΩÊó•ÊôÇ</Label>
                  <div className="grid grid-cols-4 gap-2">
                    <Select value={formData.year} onValueChange={(value) => setFormData({ ...formData, year: value })}>
                      <SelectTrigger className="whitespace-nowrap text-sm h-9 [&>svg]:h-4 [&>svg]:w-4">
                        <SelectValue placeholder="Âπ¥">
                          {formData.year && `${formData.year.slice(2)}Âπ¥`}
                        </SelectValue>
                      </SelectTrigger>
                      <SelectContent>
                        {getYearOptions().map((year) => (
                          <SelectItem key={year} value={year.toString()} className="text-sm">
                            {year.toString().slice(2)}Âπ¥
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>

                    <Select value={formData.month} onValueChange={(value) => setFormData({ ...formData, month: value })}>
                      <SelectTrigger className="whitespace-nowrap text-sm h-9 [&>svg]:h-4 [&>svg]:w-4">
                        <SelectValue placeholder="Êúà" />
                      </SelectTrigger>
                      <SelectContent>
                        {getMonthOptions().map((month) => (
                          <SelectItem key={month} value={month.toString().padStart(2, "0")}>
                            {month}Êúà
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>

                    <Select value={formData.day} onValueChange={(value) => setFormData({ ...formData, day: value })}>
                      <SelectTrigger className="whitespace-nowrap text-sm h-9 [&>svg]:h-4 [&>svg]:w-4">
                        <SelectValue placeholder="Êó•" />
                      </SelectTrigger>
                      <SelectContent>
                        {getDayOptions().map((day) => (
                          <SelectItem key={day} value={day.toString().padStart(2, "0")}>
                            {day}Êó•
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>

                    <Select value={formData.hour} onValueChange={(value) => setFormData({ ...formData, hour: value })}>
                      <SelectTrigger className="whitespace-nowrap text-sm h-9 [&>svg]:h-4 [&>svg]:w-4">
                        <SelectValue placeholder="ÊôÇ" />
                      </SelectTrigger>
                      <SelectContent>
                        {getHourOptions().map((hour) => (
                          <SelectItem key={hour} value={hour.toString().padStart(2, "0")}>
                            {hour}:00
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>
                </div>

                {/* Company Name (Business) */}
                <div className="space-y-1.5">
                  <Label htmlFor="companyNameBiz" className="flex items-center text-sm">
                    ‰ºÅÊ•≠Âêç
                    <span className="ml-1 text-sm text-red-500">*</span>
                  </Label>
                  <Input
                    id="companyNameBiz"
                    value={formData.companyNameBiz}
                    onChange={(e) => setFormData({ ...formData, companyNameBiz: e.target.value })}
                    placeholder="‰æãÔºöÊ†™Âºè‰ºöÁ§æ„Çµ„É≥„Éó„É´"
                  />
                </div>

                {/* Contact Person Name - È°ßÂÆ¢ÂêçÔºàÊãÖÂΩìËÄÖÂêçÔºâ */}
                <div className="space-y-1.5">
                  <Label htmlFor="companyName" className="flex items-center text-sm">
                    È°ßÂÆ¢ÂêçÔºàÊãÖÂΩìËÄÖÂêçÔºâ
                    <span className="ml-1 text-sm text-red-500">*</span>
                  </Label>
                  <Input
                    id="companyName"
                    value={formData.companyName}
                    onChange={(e) => setFormData({ ...formData, companyName: e.target.value })}
                    placeholder="‰æãÔºöÂ±±Áî∞ Â§™ÈÉé"
                  />
                </div>

                {/* Industry */}
                <div className="space-y-1.5">
                  <Label htmlFor="industry" className="flex items-center text-sm">
                    Ê•≠Á®Æ
                  </Label>
                  <Select
                    value={formData.industry}
                    onValueChange={(value) => setFormData({ ...formData, industry: value })}
                  >
                    <SelectTrigger id="industry" className="whitespace-nowrap text-sm h-9 [&>svg]:h-4 [&>svg]:w-4">
                      <SelectValue placeholder="ÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="manufacturing" className="text-sm">Ë£ΩÈÄ†Ê•≠</SelectItem>
                      <SelectItem value="service">„Çµ„Éº„Éì„ÇπÊ•≠</SelectItem>
                      <SelectItem value="retail">Â∞èÂ£≤Ê•≠</SelectItem>
                      <SelectItem value="wholesale">Âç∏Â£≤Ê•≠</SelectItem>
                      <SelectItem value="construction">Âª∫Ë®≠Ê•≠</SelectItem>
                      <SelectItem value="it">IT„ÉªÈÄö‰ø°</SelectItem>
                      <SelectItem value="finance">ÈáëËûç„Éª‰øùÈô∫</SelectItem>
                      <SelectItem value="other">„Åù„ÅÆ‰ªñ</SelectItem>
                    </SelectContent>
                  </Select>
                </div>

                {/* Scale */}
                <div className="space-y-1.5">
                  <Label htmlFor="scale" className="flex items-center text-sm">
                    Ë¶èÊ®°
                  </Label>
                  <Select value={formData.scale} onValueChange={(value) => setFormData({ ...formData, scale: value })}>
                    <SelectTrigger id="scale" className="whitespace-nowrap text-sm h-9 [&>svg]:h-4 [&>svg]:w-4">
                      <SelectValue placeholder="ÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="small">Â∞èË¶èÊ®° (ÂæìÊ•≠Âì°50‰∫∫Êú™Ê∫Ä)</SelectItem>
                      <SelectItem value="medium">‰∏≠Ë¶èÊ®° (ÂæìÊ•≠Âì°50-300‰∫∫)</SelectItem>
                      <SelectItem value="large">Â§ßË¶èÊ®° (ÂæìÊ•≠Âì°300‰∫∫‰ª•‰∏ä)</SelectItem>
                    </SelectContent>
                  </Select>
                </div>

                {/* Meeting Goal */}
                <div className="space-y-1.5">
                  <Label htmlFor="meetingGoal" className="flex items-center text-sm">
                    Èù¢Ë´á„Ç¥„Éº„É´
                  </Label>
                  <Select
                    value={formData.meetingGoal}
                    onValueChange={(value) => setFormData({ ...formData, meetingGoal: value })}
                  >
                    <SelectTrigger id="meetingGoal" className="whitespace-nowrap text-sm h-9 [&>svg]:h-4 [&>svg]:w-4">
                      <SelectValue placeholder="ÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="first">ÂàùÂõûÂïÜË´á</SelectItem>
                      <SelectItem value="followup">„Éï„Ç©„É≠„Éº„Ç¢„ÉÉ„Éó</SelectItem>
                      <SelectItem value="closing">„ÇØ„É≠„Éº„Ç∏„É≥„Ç∞</SelectItem>
                      <SelectItem value="other">„Åù„ÅÆ‰ªñ</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>

              {submitError && (
                <div className="mt-4 p-3 bg-red-50 border border-red-200 rounded-md text-red-600 text-sm">
                  {submitError}
                </div>
              )}

              {uploadStatus && (
                <div className={`mt-4 p-3 border rounded-md text-sm ${
                  uploadStatus.success === undefined ? 'bg-blue-50 border-blue-200 text-blue-600' :
                  uploadStatus.success ? 'bg-green-50 border-green-200 text-green-600' : 
                  'bg-red-50 border-red-200 text-red-600'
                }`}>
                  <p>{uploadStatus.message}</p>
                  {uploadStatus.url && (
                    <p className="text-xs mt-2 break-all">URL: {uploadStatus.url}</p>
                  )}
                </div>
              )}

              <div className="flex flex-col sm:flex-row gap-4 pt-4">
                <Button 
                  variant="outline" 
                  className="flex-1" 
                  onClick={() => handleSubmit("save")}
                  disabled={isSubmitting}
                >
                  {isSubmitting ? "‰øùÂ≠ò‰∏≠..." : "‰∏ÄÊôÇ‰øùÂ≠ò"}
                </Button>
                <div className="flex flex-1 gap-2">
                  {isMobile ? (
                    // Mobile version
                    <div className="flex gap-2 w-full">
                      <Button
                        variant="outline"
                        className="flex-1 whitespace-nowrap"
                        onClick={() => document.getElementById("file-upload")?.click()}
                        disabled={isUploading}
                      >
                        <Upload className="w-4 h-4 mr-2" />
                        {isUploading ? "„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ‰∏≠..." : "Èü≥Â£∞„Çí„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ"}
                      </Button>
                      <input
                        id="file-upload"
                        type="file"
                        accept="audio/*"
                        className="hidden"
                        onChange={(e) => {
                          const file = e.target.files?.[0]
                          if (file) handleFileUpload(file)
                        }}
                      />
                      <Button variant="outline" className="flex-none" onClick={handleVoiceMemoImport}>
                        <Mic className="w-4 h-4" />
                      </Button>
                    </div>
                  ) : (
                    // Desktop version
                    <div
                      {...getRootProps()}
                      className={`flex-1 relative ${
                        isDragActive ? "border-2 border-dashed border-primary" : ""
                      }`}
                    >
                      <input {...getInputProps()} />
                      <Button 
                        variant="outline" 
                        className="w-full whitespace-nowrap"
                        disabled={isUploading}
                      >
                        <Upload className="w-4 h-4 mr-2" />
                        {isUploading ? "„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ‰∏≠..." : "Èü≥Â£∞„Çí„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ"}
                      </Button>
                    </div>
                  )}
                  <Button 
                    className="flex-1 whitespace-nowrap" 
                    onClick={() => handleSubmit("next")}
                    disabled={isSubmitting || isUploading}
                  >
                    Èå≤Èü≥„Å∏
                  </Button>
                </div>
              </div>
            </div>
          </Card>
        </div>
      </div>
    </ProtectedRoute>
  )
}

